" ================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
set NERDTree
Plug 'terryma/vim-multiple-cursors'
set commentary
set highlightedyank
"map mc <A-n>
"map mx <A-x>
"map mv <A-p>

" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set ignorecase
set scrolloff=4
set history=200

set number
set relativenumber

set incsearch
set hlsearch
set keep-english-in-normal

" ================================================================================================
" = No Leader Keymaps =====================================
" ================================================================================================
nmap ge <action>(GotoNextError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodUp)
" last changed in current buffer(file)
nmap ga <action>(GotoImplementation)

" bookmark
nmap ma <action>(ToggleBookmark)

nmap L $
vmap L $
omap L $
nmap H ^
vmap H ^
omap H ^

nmap E <action>(ShowErrorDescription)

nmap <esc> :noh<cr><esc>
nmap <A-l> <action>(NextTab)
nmap <A-h> <action>(PreviousTab)

" move lines
nmap <A-j> :m .+1<cr>==
nmap <A-k> :m .-2<cr>==
vmap <A-j> :m '>+1<cr>gv==gv
vmap <A-k> :m '>-2<cr>gv==gv


" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "

nmap <leader>j <action>(NextTab)
nmap <leader>k <action>(PreviousTab)
nmap <leader>w :w<cr>
" ================================================================================================
" üëªüëªüëª Which-Key üëªüëªüëª
" ================================================================================================
set which-key
set notimeout

" d: diff
" nmap <leader>dd <action>(Vcs.ShowTabbedFileHistory)
let g:WhichKeyDesc_CloseBuffer = "<leader>d CloseBuffer"
nmap <leader>d :q<CR>

" f: Find/Format ‚≠êÔ∏è
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft FindText"
nmap <leader>ft <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc Commands"
nmap <leader>fc <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

" g: GoTo ‚≠êÔ∏è
let g:WhichKeyDesc_Goto = "<leader>g GoTo"
let g:WhichKeyDesc_Goto_Ideavimrc = "<leader>gi ideavimrc"
let g:WhichKeyDesc_Goto_Source = "<leader>gs source"
let g:WhichKeyDesc_Goto_Terminal = "<leader>gt terminal"
nmap <leader>gi :e ~/.ideavimrc<cr>
nmap <leader>gs :source ~/.ideavimrc<cr>
nmap <leader>gt <action>(ActivateTerminalToolWindow)

" i: Insert ‚≠êÔ∏è
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(a

" j: add Semicolon and goto nextline‚≠êÔ∏è
" let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
"nmap <leader>j A;<ESC>o;


" l: lsp: Language server protocol (align with neovim)‚≠êÔ∏è
let g:WhichKeyDesc_LSP = "<leader>l LSP"
let g:WhichKeyDesc_LSP_Rename = "<leader>lr Rename"
nmap <leader>lr <action>(RenameElement)

" n: No ‚≠êÔ∏è
let g:WhichKeyDesc_No_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>


" s: Show ‚≠êÔ∏è
let g:WhichKeyDesc_Show = "<leader>s Show"
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss ShowFileStructure"
nmap <leader>ss <action>(FileStructurePopup)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sb <action>(ShowBookmarks)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sb ShowParameterInfo"
nmap <leader>sp <action>(ParameterInfo)

" r: Run/Re ‚≠êÔ∏è
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
map <leader>rn <action>(RenameElement)

" w: Window ‚≠êÔ∏è
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)
let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>wl splitWindowVertically"
nmap <leader>wl <action>(Macro.SplitVertically)
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc closeActiveWindow"
nmap <leader>wc <c-w>c

" z: zip(fold) ‚≠êÔ∏è
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)

" q: Close ‚≠êÔ∏è;

" e: Toggle Explorer ‚≠êÔ∏è
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorer"
nmap <leader>e <action>(ActivateProjectToolWindow)
" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)

"c: Code
let g:WhichKeyDesc_Code = "<leader>c Code"
let g:WhichKeyDesc_Code_Build_Project = "<leader>cb buildProject"
nmap <leader>cb <action>(ActivateBuildToolWindow) \| <action>(CompileDirty)